/* This file is autogenerated with generate_lip_code.py */
#include "LIPBasis.h"
#include <cfloat>

namespace helfem {
  namespace polynomial_basis {

    void LIPBasis::eval_f_raw(const arma::vec &x, arma::mat &f) const {
      // Allocate memory
      f.zeros(x.n_elem, x0.n_elem);
      // Loop over points
      for (size_t ix = 0; ix < x.n_elem; ix++) {
        // Loop over polynomials
        for (size_t fi = 0; fi < x0.n_elem; fi++) {
          // Form the LIP product
          double fval = 1.0;
          for (size_t ip = 0; ip < x0.n_elem; ip++) {
            // Skip terms which have been acted upon by a derivative
            if (ip == fi)
              continue;
            fval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
          }
          // Store the computed value
          f(ix, fi) = fval;
        }
      }
    }
    void LIPBasis::eval_df_raw(const arma::vec &x, arma::mat &df) const {
      // Allocate memory
      df.zeros(x.n_elem, x0.n_elem);
      // Loop over points
      for (size_t ix = 0; ix < x.n_elem; ix++) {
        // Loop over polynomials
        for (size_t fi = 0; fi < x0.n_elem; fi++) {
          double el = 0.0;
          // Derivative 1 acting on index
          for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
            if (d1 == fi)
              continue;
            // Form the LIP product
            double dfval = 1.0;
            for (size_t ip = 0; ip < x0.n_elem; ip++) {
              // Skip terms which have been acted upon by a derivative
              if (ip == d1)
                continue;
              if (ip == fi)
                continue;
              dfval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
            }
            // Apply derivative denominators
            dfval /= (x0(fi) - x0(d1));
            // Store the computed value
            el += dfval;
          }
          df(ix, fi) = el;
        }
      }
    }
    void LIPBasis::eval_d2f_raw(const arma::vec &x, arma::mat &d2f) const {
      // Allocate memory
      d2f.zeros(x.n_elem, x0.n_elem);
      // Loop over points
      for (size_t ix = 0; ix < x.n_elem; ix++) {
        // Loop over polynomials
        for (size_t fi = 0; fi < x0.n_elem; fi++) {
          double el = 0.0;
          // Derivative 1 acting on index
          for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
            if (d1 == fi)
              continue;
            // Derivative 2 acting on index
            for (size_t d2 = 0; d2 < d1; d2++) {
              if (d2 == fi)
                continue;
              // Form the LIP product
              double d2fval = 1.0;
              for (size_t ip = 0; ip < x0.n_elem; ip++) {
                // Skip terms which have been acted upon by a derivative
                if (ip == d1)
                  continue;
                if (ip == d2)
                  continue;
                if (ip == fi)
                  continue;
                d2fval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
              }
              // Apply derivative denominators
              d2fval /= (x0(fi) - x0(d1)) * (x0(fi) - x0(d2));
              // Store the computed value
              el += d2fval;
            }
          }
          d2f(ix, fi) = 2 * el;
        }
      }
    }
    void LIPBasis::eval_d3f_raw(const arma::vec &x, arma::mat &d3f) const {
      // Allocate memory
      d3f.zeros(x.n_elem, x0.n_elem);
      // Loop over points
      for (size_t ix = 0; ix < x.n_elem; ix++) {
        // Loop over polynomials
        for (size_t fi = 0; fi < x0.n_elem; fi++) {
          double el = 0.0;
          // Derivative 1 acting on index
          for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
            if (d1 == fi)
              continue;
            // Derivative 2 acting on index
            for (size_t d2 = 0; d2 < d1; d2++) {
              if (d2 == fi)
                continue;
              // Derivative 3 acting on index
              for (size_t d3 = 0; d3 < d2; d3++) {
                if (d3 == fi)
                  continue;
                // Form the LIP product
                double d3fval = 1.0;
                for (size_t ip = 0; ip < x0.n_elem; ip++) {
                  // Skip terms which have been acted upon by a derivative
                  if (ip == d1)
                    continue;
                  if (ip == d2)
                    continue;
                  if (ip == d3)
                    continue;
                  if (ip == fi)
                    continue;
                  d3fval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                }
                // Apply derivative denominators
                d3fval /=
                    (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) * (x0(fi) - x0(d3));
                // Store the computed value
                el += d3fval;
              }
            }
          }
          d3f(ix, fi) = 6 * el;
        }
      }
    }
    void LIPBasis::eval_d4f_raw(const arma::vec &x, arma::mat &d4f) const {
      // Allocate memory
      d4f.zeros(x.n_elem, x0.n_elem);
      // Loop over points
      for (size_t ix = 0; ix < x.n_elem; ix++) {
        // Loop over polynomials
        for (size_t fi = 0; fi < x0.n_elem; fi++) {
          double el = 0.0;
          // Derivative 1 acting on index
          for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
            if (d1 == fi)
              continue;
            // Derivative 2 acting on index
            for (size_t d2 = 0; d2 < d1; d2++) {
              if (d2 == fi)
                continue;
              // Derivative 3 acting on index
              for (size_t d3 = 0; d3 < d2; d3++) {
                if (d3 == fi)
                  continue;
                // Derivative 4 acting on index
                for (size_t d4 = 0; d4 < d3; d4++) {
                  if (d4 == fi)
                    continue;
                  // Form the LIP product
                  double d4fval = 1.0;
                  for (size_t ip = 0; ip < x0.n_elem; ip++) {
                    // Skip terms which have been acted upon by a derivative
                    if (ip == d1)
                      continue;
                    if (ip == d2)
                      continue;
                    if (ip == d3)
                      continue;
                    if (ip == d4)
                      continue;
                    if (ip == fi)
                      continue;
                    d4fval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                  }
                  // Apply derivative denominators
                  d4fval /= (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) *
                            (x0(fi) - x0(d3)) * (x0(fi) - x0(d4));
                  // Store the computed value
                  el += d4fval;
                }
              }
            }
          }
          d4f(ix, fi) = 24 * el;
        }
      }
    }
    void LIPBasis::eval_d5f_raw(const arma::vec &x, arma::mat &d5f) const {
      // Allocate memory
      d5f.zeros(x.n_elem, x0.n_elem);
      // Loop over points
      for (size_t ix = 0; ix < x.n_elem; ix++) {
        // Loop over polynomials
        for (size_t fi = 0; fi < x0.n_elem; fi++) {
          double el = 0.0;
          // Derivative 1 acting on index
          for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
            if (d1 == fi)
              continue;
            // Derivative 2 acting on index
            for (size_t d2 = 0; d2 < d1; d2++) {
              if (d2 == fi)
                continue;
              // Derivative 3 acting on index
              for (size_t d3 = 0; d3 < d2; d3++) {
                if (d3 == fi)
                  continue;
                // Derivative 4 acting on index
                for (size_t d4 = 0; d4 < d3; d4++) {
                  if (d4 == fi)
                    continue;
                  // Derivative 5 acting on index
                  for (size_t d5 = 0; d5 < d4; d5++) {
                    if (d5 == fi)
                      continue;
                    // Form the LIP product
                    double d5fval = 1.0;
                    for (size_t ip = 0; ip < x0.n_elem; ip++) {
                      // Skip terms which have been acted upon by a derivative
                      if (ip == d1)
                        continue;
                      if (ip == d2)
                        continue;
                      if (ip == d3)
                        continue;
                      if (ip == d4)
                        continue;
                      if (ip == d5)
                        continue;
                      if (ip == fi)
                        continue;
                      d5fval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                    }
                    // Apply derivative denominators
                    d5fval /= (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) *
                              (x0(fi) - x0(d3)) * (x0(fi) - x0(d4)) *
                              (x0(fi) - x0(d5));
                    // Store the computed value
                    el += d5fval;
                  }
                }
              }
            }
          }
          d5f(ix, fi) = 120 * el;
        }
      }
    }
  } // namespace polynomial_basis
} // namespace helfem
