/* This file is autogenerated with generate_lip_code.py */
#include "LIPBasis.h"
#include <cfloat>

namespace helfem {
  namespace polynomial_basis {

    void LIPBasis::eval_prim_dnf(const arma::vec &x, arma::mat &dnf, int n,
                                 double element_length) const {
      switch (n) {
      case (0): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            // Form the LIP product
            double dnfval = 1.0;
            for (size_t ip = 0; ip < x0.n_elem; ip++) {
              // Skip terms which have been acted upon by a derivative
              if (ip == fi)
                continue;
              dnfval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
            }
            // Store the computed value
            dnf(ix, fi) = dnfval;
          }
        }
      } break;
      case (1): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Form the LIP product
              double dnfval = 1.0;
              for (size_t ip = 0; ip < x0.n_elem; ip++) {
                // Skip terms which have been acted upon by a derivative
                if (ip == d1)
                  continue;
                if (ip == fi)
                  continue;
                dnfval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
              }
              // Apply derivative denominators
              dnfval /= (x0(fi) - x0(d1));
              // Store the computed value
              el += dnfval;
            }
            dnf(ix, fi) = el;
          }
        }
      } break;
      case (2): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Form the LIP product
                double dnfval = 1.0;
                for (size_t ip = 0; ip < x0.n_elem; ip++) {
                  // Skip terms which have been acted upon by a derivative
                  if (ip == d1)
                    continue;
                  if (ip == d2)
                    continue;
                  if (ip == fi)
                    continue;
                  dnfval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                }
                // Apply derivative denominators
                dnfval /= (x0(fi) - x0(d1)) * (x0(fi) - x0(d2));
                // Store the computed value
                el += dnfval;
              }
            }
            dnf(ix, fi) = 2 * el;
          }
        }
      } break;
      case (3): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Form the LIP product
                  double dnfval = 1.0;
                  for (size_t ip = 0; ip < x0.n_elem; ip++) {
                    // Skip terms which have been acted upon by a derivative
                    if (ip == d1)
                      continue;
                    if (ip == d2)
                      continue;
                    if (ip == d3)
                      continue;
                    if (ip == fi)
                      continue;
                    dnfval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                  }
                  // Apply derivative denominators
                  dnfval /=
                      (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) * (x0(fi) - x0(d3));
                  // Store the computed value
                  el += dnfval;
                }
              }
            }
            dnf(ix, fi) = 6 * el;
          }
        }
      } break;
      case (4): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Form the LIP product
                    double dnfval = 1.0;
                    for (size_t ip = 0; ip < x0.n_elem; ip++) {
                      // Skip terms which have been acted upon by a derivative
                      if (ip == d1)
                        continue;
                      if (ip == d2)
                        continue;
                      if (ip == d3)
                        continue;
                      if (ip == d4)
                        continue;
                      if (ip == fi)
                        continue;
                      dnfval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                    }
                    // Apply derivative denominators
                    dnfval /= (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) *
                              (x0(fi) - x0(d3)) * (x0(fi) - x0(d4));
                    // Store the computed value
                    el += dnfval;
                  }
                }
              }
            }
            dnf(ix, fi) = 24 * el;
          }
        }
      } break;
      case (5): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Form the LIP product
                      double dnfval = 1.0;
                      for (size_t ip = 0; ip < x0.n_elem; ip++) {
                        // Skip terms which have been acted upon by a derivative
                        if (ip == d1)
                          continue;
                        if (ip == d2)
                          continue;
                        if (ip == d3)
                          continue;
                        if (ip == d4)
                          continue;
                        if (ip == d5)
                          continue;
                        if (ip == fi)
                          continue;
                        dnfval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                      }
                      // Apply derivative denominators
                      dnfval /= (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) *
                                (x0(fi) - x0(d3)) * (x0(fi) - x0(d4)) *
                                (x0(fi) - x0(d5));
                      // Store the computed value
                      el += dnfval;
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 120 * el;
          }
        }
      } break;
      case (6): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Form the LIP product
                        double dnfval = 1.0;
                        for (size_t ip = 0; ip < x0.n_elem; ip++) {
                          // Skip terms which have been acted upon by a
                          // derivative
                          if (ip == d1)
                            continue;
                          if (ip == d2)
                            continue;
                          if (ip == d3)
                            continue;
                          if (ip == d4)
                            continue;
                          if (ip == d5)
                            continue;
                          if (ip == d6)
                            continue;
                          if (ip == fi)
                            continue;
                          dnfval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                        }
                        // Apply derivative denominators
                        dnfval /= (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) *
                                  (x0(fi) - x0(d3)) * (x0(fi) - x0(d4)) *
                                  (x0(fi) - x0(d5)) * (x0(fi) - x0(d6));
                        // Store the computed value
                        el += dnfval;
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 720 * el;
          }
        }
      } break;
      case (7): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Form the LIP product
                          double dnfval = 1.0;
                          for (size_t ip = 0; ip < x0.n_elem; ip++) {
                            // Skip terms which have been acted upon by a
                            // derivative
                            if (ip == d1)
                              continue;
                            if (ip == d2)
                              continue;
                            if (ip == d3)
                              continue;
                            if (ip == d4)
                              continue;
                            if (ip == d5)
                              continue;
                            if (ip == d6)
                              continue;
                            if (ip == d7)
                              continue;
                            if (ip == fi)
                              continue;
                            dnfval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                          }
                          // Apply derivative denominators
                          dnfval /= (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) *
                                    (x0(fi) - x0(d3)) * (x0(fi) - x0(d4)) *
                                    (x0(fi) - x0(d5)) * (x0(fi) - x0(d6)) *
                                    (x0(fi) - x0(d7));
                          // Store the computed value
                          el += dnfval;
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 5040 * el;
          }
        }
      } break;
      case (8): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Form the LIP product
                            double dnfval = 1.0;
                            for (size_t ip = 0; ip < x0.n_elem; ip++) {
                              // Skip terms which have been acted upon by a
                              // derivative
                              if (ip == d1)
                                continue;
                              if (ip == d2)
                                continue;
                              if (ip == d3)
                                continue;
                              if (ip == d4)
                                continue;
                              if (ip == d5)
                                continue;
                              if (ip == d6)
                                continue;
                              if (ip == d7)
                                continue;
                              if (ip == d8)
                                continue;
                              if (ip == fi)
                                continue;
                              dnfval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                            }
                            // Apply derivative denominators
                            dnfval /= (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) *
                                      (x0(fi) - x0(d3)) * (x0(fi) - x0(d4)) *
                                      (x0(fi) - x0(d5)) * (x0(fi) - x0(d6)) *
                                      (x0(fi) - x0(d7)) * (x0(fi) - x0(d8));
                            // Store the computed value
                            el += dnfval;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 40320 * el;
          }
        }
      } break;
      case (9): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Form the LIP product
                              double dnfval = 1.0;
                              for (size_t ip = 0; ip < x0.n_elem; ip++) {
                                // Skip terms which have been acted upon by a
                                // derivative
                                if (ip == d1)
                                  continue;
                                if (ip == d2)
                                  continue;
                                if (ip == d3)
                                  continue;
                                if (ip == d4)
                                  continue;
                                if (ip == d5)
                                  continue;
                                if (ip == d6)
                                  continue;
                                if (ip == d7)
                                  continue;
                                if (ip == d8)
                                  continue;
                                if (ip == d9)
                                  continue;
                                if (ip == fi)
                                  continue;
                                dnfval *= (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                              }
                              // Apply derivative denominators
                              dnfval /= (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) *
                                        (x0(fi) - x0(d3)) * (x0(fi) - x0(d4)) *
                                        (x0(fi) - x0(d5)) * (x0(fi) - x0(d6)) *
                                        (x0(fi) - x0(d7)) * (x0(fi) - x0(d8)) *
                                        (x0(fi) - x0(d9));
                              // Store the computed value
                              el += dnfval;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 362880 * el;
          }
        }
      } break;
      case (10): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Derivative 10 acting on index
                              for (size_t d10 = 0; d10 < d9; d10++) {
                                if (d10 == fi)
                                  continue;
                                // Form the LIP product
                                double dnfval = 1.0;
                                for (size_t ip = 0; ip < x0.n_elem; ip++) {
                                  // Skip terms which have been acted upon by a
                                  // derivative
                                  if (ip == d1)
                                    continue;
                                  if (ip == d2)
                                    continue;
                                  if (ip == d3)
                                    continue;
                                  if (ip == d4)
                                    continue;
                                  if (ip == d5)
                                    continue;
                                  if (ip == d6)
                                    continue;
                                  if (ip == d7)
                                    continue;
                                  if (ip == d8)
                                    continue;
                                  if (ip == d9)
                                    continue;
                                  if (ip == d10)
                                    continue;
                                  if (ip == fi)
                                    continue;
                                  dnfval *=
                                      (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                                }
                                // Apply derivative denominators
                                dnfval /=
                                    (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) *
                                    (x0(fi) - x0(d3)) * (x0(fi) - x0(d4)) *
                                    (x0(fi) - x0(d5)) * (x0(fi) - x0(d6)) *
                                    (x0(fi) - x0(d7)) * (x0(fi) - x0(d8)) *
                                    (x0(fi) - x0(d9)) * (x0(fi) - x0(d10));
                                // Store the computed value
                                el += dnfval;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 3628800 * el;
          }
        }
      } break;
      case (11): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Derivative 10 acting on index
                              for (size_t d10 = 0; d10 < d9; d10++) {
                                if (d10 == fi)
                                  continue;
                                // Derivative 11 acting on index
                                for (size_t d11 = 0; d11 < d10; d11++) {
                                  if (d11 == fi)
                                    continue;
                                  // Form the LIP product
                                  double dnfval = 1.0;
                                  for (size_t ip = 0; ip < x0.n_elem; ip++) {
                                    // Skip terms which have been acted upon by
                                    // a derivative
                                    if (ip == d1)
                                      continue;
                                    if (ip == d2)
                                      continue;
                                    if (ip == d3)
                                      continue;
                                    if (ip == d4)
                                      continue;
                                    if (ip == d5)
                                      continue;
                                    if (ip == d6)
                                      continue;
                                    if (ip == d7)
                                      continue;
                                    if (ip == d8)
                                      continue;
                                    if (ip == d9)
                                      continue;
                                    if (ip == d10)
                                      continue;
                                    if (ip == d11)
                                      continue;
                                    if (ip == fi)
                                      continue;
                                    dnfval *=
                                        (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                                  }
                                  // Apply derivative denominators
                                  dnfval /=
                                      (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) *
                                      (x0(fi) - x0(d3)) * (x0(fi) - x0(d4)) *
                                      (x0(fi) - x0(d5)) * (x0(fi) - x0(d6)) *
                                      (x0(fi) - x0(d7)) * (x0(fi) - x0(d8)) *
                                      (x0(fi) - x0(d9)) * (x0(fi) - x0(d10)) *
                                      (x0(fi) - x0(d11));
                                  // Store the computed value
                                  el += dnfval;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 39916800 * el;
          }
        }
      } break;
      case (12): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Derivative 10 acting on index
                              for (size_t d10 = 0; d10 < d9; d10++) {
                                if (d10 == fi)
                                  continue;
                                // Derivative 11 acting on index
                                for (size_t d11 = 0; d11 < d10; d11++) {
                                  if (d11 == fi)
                                    continue;
                                  // Derivative 12 acting on index
                                  for (size_t d12 = 0; d12 < d11; d12++) {
                                    if (d12 == fi)
                                      continue;
                                    // Form the LIP product
                                    double dnfval = 1.0;
                                    for (size_t ip = 0; ip < x0.n_elem; ip++) {
                                      // Skip terms which have been acted upon
                                      // by a derivative
                                      if (ip == d1)
                                        continue;
                                      if (ip == d2)
                                        continue;
                                      if (ip == d3)
                                        continue;
                                      if (ip == d4)
                                        continue;
                                      if (ip == d5)
                                        continue;
                                      if (ip == d6)
                                        continue;
                                      if (ip == d7)
                                        continue;
                                      if (ip == d8)
                                        continue;
                                      if (ip == d9)
                                        continue;
                                      if (ip == d10)
                                        continue;
                                      if (ip == d11)
                                        continue;
                                      if (ip == d12)
                                        continue;
                                      if (ip == fi)
                                        continue;
                                      dnfval *=
                                          (x(ix) - x0(ip)) / (x0(fi) - x0(ip));
                                    }
                                    // Apply derivative denominators
                                    dnfval /=
                                        (x0(fi) - x0(d1)) * (x0(fi) - x0(d2)) *
                                        (x0(fi) - x0(d3)) * (x0(fi) - x0(d4)) *
                                        (x0(fi) - x0(d5)) * (x0(fi) - x0(d6)) *
                                        (x0(fi) - x0(d7)) * (x0(fi) - x0(d8)) *
                                        (x0(fi) - x0(d9)) * (x0(fi) - x0(d10)) *
                                        (x0(fi) - x0(d11)) * (x0(fi) - x0(d12));
                                    // Store the computed value
                                    el += dnfval;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 479001600 * el;
          }
        }
      } break;
      case (13): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Derivative 10 acting on index
                              for (size_t d10 = 0; d10 < d9; d10++) {
                                if (d10 == fi)
                                  continue;
                                // Derivative 11 acting on index
                                for (size_t d11 = 0; d11 < d10; d11++) {
                                  if (d11 == fi)
                                    continue;
                                  // Derivative 12 acting on index
                                  for (size_t d12 = 0; d12 < d11; d12++) {
                                    if (d12 == fi)
                                      continue;
                                    // Derivative 13 acting on index
                                    for (size_t d13 = 0; d13 < d12; d13++) {
                                      if (d13 == fi)
                                        continue;
                                      // Form the LIP product
                                      double dnfval = 1.0;
                                      for (size_t ip = 0; ip < x0.n_elem;
                                           ip++) {
                                        // Skip terms which have been acted upon
                                        // by a derivative
                                        if (ip == d1)
                                          continue;
                                        if (ip == d2)
                                          continue;
                                        if (ip == d3)
                                          continue;
                                        if (ip == d4)
                                          continue;
                                        if (ip == d5)
                                          continue;
                                        if (ip == d6)
                                          continue;
                                        if (ip == d7)
                                          continue;
                                        if (ip == d8)
                                          continue;
                                        if (ip == d9)
                                          continue;
                                        if (ip == d10)
                                          continue;
                                        if (ip == d11)
                                          continue;
                                        if (ip == d12)
                                          continue;
                                        if (ip == d13)
                                          continue;
                                        if (ip == fi)
                                          continue;
                                        dnfval *= (x(ix) - x0(ip)) /
                                                  (x0(fi) - x0(ip));
                                      }
                                      // Apply derivative denominators
                                      dnfval /= (x0(fi) - x0(d1)) *
                                                (x0(fi) - x0(d2)) *
                                                (x0(fi) - x0(d3)) *
                                                (x0(fi) - x0(d4)) *
                                                (x0(fi) - x0(d5)) *
                                                (x0(fi) - x0(d6)) *
                                                (x0(fi) - x0(d7)) *
                                                (x0(fi) - x0(d8)) *
                                                (x0(fi) - x0(d9)) *
                                                (x0(fi) - x0(d10)) *
                                                (x0(fi) - x0(d11)) *
                                                (x0(fi) - x0(d12)) *
                                                (x0(fi) - x0(d13));
                                      // Store the computed value
                                      el += dnfval;
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 6227020800 * el;
          }
        }
      } break;
      case (14): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Derivative 10 acting on index
                              for (size_t d10 = 0; d10 < d9; d10++) {
                                if (d10 == fi)
                                  continue;
                                // Derivative 11 acting on index
                                for (size_t d11 = 0; d11 < d10; d11++) {
                                  if (d11 == fi)
                                    continue;
                                  // Derivative 12 acting on index
                                  for (size_t d12 = 0; d12 < d11; d12++) {
                                    if (d12 == fi)
                                      continue;
                                    // Derivative 13 acting on index
                                    for (size_t d13 = 0; d13 < d12; d13++) {
                                      if (d13 == fi)
                                        continue;
                                      // Derivative 14 acting on index
                                      for (size_t d14 = 0; d14 < d13; d14++) {
                                        if (d14 == fi)
                                          continue;
                                        // Form the LIP product
                                        double dnfval = 1.0;
                                        for (size_t ip = 0; ip < x0.n_elem;
                                             ip++) {
                                          // Skip terms which have been acted
                                          // upon by a derivative
                                          if (ip == d1)
                                            continue;
                                          if (ip == d2)
                                            continue;
                                          if (ip == d3)
                                            continue;
                                          if (ip == d4)
                                            continue;
                                          if (ip == d5)
                                            continue;
                                          if (ip == d6)
                                            continue;
                                          if (ip == d7)
                                            continue;
                                          if (ip == d8)
                                            continue;
                                          if (ip == d9)
                                            continue;
                                          if (ip == d10)
                                            continue;
                                          if (ip == d11)
                                            continue;
                                          if (ip == d12)
                                            continue;
                                          if (ip == d13)
                                            continue;
                                          if (ip == d14)
                                            continue;
                                          if (ip == fi)
                                            continue;
                                          dnfval *= (x(ix) - x0(ip)) /
                                                    (x0(fi) - x0(ip));
                                        }
                                        // Apply derivative denominators
                                        dnfval /= (x0(fi) - x0(d1)) *
                                                  (x0(fi) - x0(d2)) *
                                                  (x0(fi) - x0(d3)) *
                                                  (x0(fi) - x0(d4)) *
                                                  (x0(fi) - x0(d5)) *
                                                  (x0(fi) - x0(d6)) *
                                                  (x0(fi) - x0(d7)) *
                                                  (x0(fi) - x0(d8)) *
                                                  (x0(fi) - x0(d9)) *
                                                  (x0(fi) - x0(d10)) *
                                                  (x0(fi) - x0(d11)) *
                                                  (x0(fi) - x0(d12)) *
                                                  (x0(fi) - x0(d13)) *
                                                  (x0(fi) - x0(d14));
                                        // Store the computed value
                                        el += dnfval;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 87178291200 * el;
          }
        }
      } break;
      case (15): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Derivative 10 acting on index
                              for (size_t d10 = 0; d10 < d9; d10++) {
                                if (d10 == fi)
                                  continue;
                                // Derivative 11 acting on index
                                for (size_t d11 = 0; d11 < d10; d11++) {
                                  if (d11 == fi)
                                    continue;
                                  // Derivative 12 acting on index
                                  for (size_t d12 = 0; d12 < d11; d12++) {
                                    if (d12 == fi)
                                      continue;
                                    // Derivative 13 acting on index
                                    for (size_t d13 = 0; d13 < d12; d13++) {
                                      if (d13 == fi)
                                        continue;
                                      // Derivative 14 acting on index
                                      for (size_t d14 = 0; d14 < d13; d14++) {
                                        if (d14 == fi)
                                          continue;
                                        // Derivative 15 acting on index
                                        for (size_t d15 = 0; d15 < d14; d15++) {
                                          if (d15 == fi)
                                            continue;
                                          // Form the LIP product
                                          double dnfval = 1.0;
                                          for (size_t ip = 0; ip < x0.n_elem;
                                               ip++) {
                                            // Skip terms which have been acted
                                            // upon by a derivative
                                            if (ip == d1)
                                              continue;
                                            if (ip == d2)
                                              continue;
                                            if (ip == d3)
                                              continue;
                                            if (ip == d4)
                                              continue;
                                            if (ip == d5)
                                              continue;
                                            if (ip == d6)
                                              continue;
                                            if (ip == d7)
                                              continue;
                                            if (ip == d8)
                                              continue;
                                            if (ip == d9)
                                              continue;
                                            if (ip == d10)
                                              continue;
                                            if (ip == d11)
                                              continue;
                                            if (ip == d12)
                                              continue;
                                            if (ip == d13)
                                              continue;
                                            if (ip == d14)
                                              continue;
                                            if (ip == d15)
                                              continue;
                                            if (ip == fi)
                                              continue;
                                            dnfval *= (x(ix) - x0(ip)) /
                                                      (x0(fi) - x0(ip));
                                          }
                                          // Apply derivative denominators
                                          dnfval /= (x0(fi) - x0(d1)) *
                                                    (x0(fi) - x0(d2)) *
                                                    (x0(fi) - x0(d3)) *
                                                    (x0(fi) - x0(d4)) *
                                                    (x0(fi) - x0(d5)) *
                                                    (x0(fi) - x0(d6)) *
                                                    (x0(fi) - x0(d7)) *
                                                    (x0(fi) - x0(d8)) *
                                                    (x0(fi) - x0(d9)) *
                                                    (x0(fi) - x0(d10)) *
                                                    (x0(fi) - x0(d11)) *
                                                    (x0(fi) - x0(d12)) *
                                                    (x0(fi) - x0(d13)) *
                                                    (x0(fi) - x0(d14)) *
                                                    (x0(fi) - x0(d15));
                                          // Store the computed value
                                          el += dnfval;
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 1307674368000 * el;
          }
        }
      } break;
      case (16): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Derivative 10 acting on index
                              for (size_t d10 = 0; d10 < d9; d10++) {
                                if (d10 == fi)
                                  continue;
                                // Derivative 11 acting on index
                                for (size_t d11 = 0; d11 < d10; d11++) {
                                  if (d11 == fi)
                                    continue;
                                  // Derivative 12 acting on index
                                  for (size_t d12 = 0; d12 < d11; d12++) {
                                    if (d12 == fi)
                                      continue;
                                    // Derivative 13 acting on index
                                    for (size_t d13 = 0; d13 < d12; d13++) {
                                      if (d13 == fi)
                                        continue;
                                      // Derivative 14 acting on index
                                      for (size_t d14 = 0; d14 < d13; d14++) {
                                        if (d14 == fi)
                                          continue;
                                        // Derivative 15 acting on index
                                        for (size_t d15 = 0; d15 < d14; d15++) {
                                          if (d15 == fi)
                                            continue;
                                          // Derivative 16 acting on index
                                          for (size_t d16 = 0; d16 < d15;
                                               d16++) {
                                            if (d16 == fi)
                                              continue;
                                            // Form the LIP product
                                            double dnfval = 1.0;
                                            for (size_t ip = 0; ip < x0.n_elem;
                                                 ip++) {
                                              // Skip terms which have been
                                              // acted upon by a derivative
                                              if (ip == d1)
                                                continue;
                                              if (ip == d2)
                                                continue;
                                              if (ip == d3)
                                                continue;
                                              if (ip == d4)
                                                continue;
                                              if (ip == d5)
                                                continue;
                                              if (ip == d6)
                                                continue;
                                              if (ip == d7)
                                                continue;
                                              if (ip == d8)
                                                continue;
                                              if (ip == d9)
                                                continue;
                                              if (ip == d10)
                                                continue;
                                              if (ip == d11)
                                                continue;
                                              if (ip == d12)
                                                continue;
                                              if (ip == d13)
                                                continue;
                                              if (ip == d14)
                                                continue;
                                              if (ip == d15)
                                                continue;
                                              if (ip == d16)
                                                continue;
                                              if (ip == fi)
                                                continue;
                                              dnfval *= (x(ix) - x0(ip)) /
                                                        (x0(fi) - x0(ip));
                                            }
                                            // Apply derivative denominators
                                            dnfval /= (x0(fi) - x0(d1)) *
                                                      (x0(fi) - x0(d2)) *
                                                      (x0(fi) - x0(d3)) *
                                                      (x0(fi) - x0(d4)) *
                                                      (x0(fi) - x0(d5)) *
                                                      (x0(fi) - x0(d6)) *
                                                      (x0(fi) - x0(d7)) *
                                                      (x0(fi) - x0(d8)) *
                                                      (x0(fi) - x0(d9)) *
                                                      (x0(fi) - x0(d10)) *
                                                      (x0(fi) - x0(d11)) *
                                                      (x0(fi) - x0(d12)) *
                                                      (x0(fi) - x0(d13)) *
                                                      (x0(fi) - x0(d14)) *
                                                      (x0(fi) - x0(d15)) *
                                                      (x0(fi) - x0(d16));
                                            // Store the computed value
                                            el += dnfval;
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 20922789888000 * el;
          }
        }
      } break;
      case (17): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Derivative 10 acting on index
                              for (size_t d10 = 0; d10 < d9; d10++) {
                                if (d10 == fi)
                                  continue;
                                // Derivative 11 acting on index
                                for (size_t d11 = 0; d11 < d10; d11++) {
                                  if (d11 == fi)
                                    continue;
                                  // Derivative 12 acting on index
                                  for (size_t d12 = 0; d12 < d11; d12++) {
                                    if (d12 == fi)
                                      continue;
                                    // Derivative 13 acting on index
                                    for (size_t d13 = 0; d13 < d12; d13++) {
                                      if (d13 == fi)
                                        continue;
                                      // Derivative 14 acting on index
                                      for (size_t d14 = 0; d14 < d13; d14++) {
                                        if (d14 == fi)
                                          continue;
                                        // Derivative 15 acting on index
                                        for (size_t d15 = 0; d15 < d14; d15++) {
                                          if (d15 == fi)
                                            continue;
                                          // Derivative 16 acting on index
                                          for (size_t d16 = 0; d16 < d15;
                                               d16++) {
                                            if (d16 == fi)
                                              continue;
                                            // Derivative 17 acting on index
                                            for (size_t d17 = 0; d17 < d16;
                                                 d17++) {
                                              if (d17 == fi)
                                                continue;
                                              // Form the LIP product
                                              double dnfval = 1.0;
                                              for (size_t ip = 0;
                                                   ip < x0.n_elem; ip++) {
                                                // Skip terms which have been
                                                // acted upon by a derivative
                                                if (ip == d1)
                                                  continue;
                                                if (ip == d2)
                                                  continue;
                                                if (ip == d3)
                                                  continue;
                                                if (ip == d4)
                                                  continue;
                                                if (ip == d5)
                                                  continue;
                                                if (ip == d6)
                                                  continue;
                                                if (ip == d7)
                                                  continue;
                                                if (ip == d8)
                                                  continue;
                                                if (ip == d9)
                                                  continue;
                                                if (ip == d10)
                                                  continue;
                                                if (ip == d11)
                                                  continue;
                                                if (ip == d12)
                                                  continue;
                                                if (ip == d13)
                                                  continue;
                                                if (ip == d14)
                                                  continue;
                                                if (ip == d15)
                                                  continue;
                                                if (ip == d16)
                                                  continue;
                                                if (ip == d17)
                                                  continue;
                                                if (ip == fi)
                                                  continue;
                                                dnfval *= (x(ix) - x0(ip)) /
                                                          (x0(fi) - x0(ip));
                                              }
                                              // Apply derivative denominators
                                              dnfval /= (x0(fi) - x0(d1)) *
                                                        (x0(fi) - x0(d2)) *
                                                        (x0(fi) - x0(d3)) *
                                                        (x0(fi) - x0(d4)) *
                                                        (x0(fi) - x0(d5)) *
                                                        (x0(fi) - x0(d6)) *
                                                        (x0(fi) - x0(d7)) *
                                                        (x0(fi) - x0(d8)) *
                                                        (x0(fi) - x0(d9)) *
                                                        (x0(fi) - x0(d10)) *
                                                        (x0(fi) - x0(d11)) *
                                                        (x0(fi) - x0(d12)) *
                                                        (x0(fi) - x0(d13)) *
                                                        (x0(fi) - x0(d14)) *
                                                        (x0(fi) - x0(d15)) *
                                                        (x0(fi) - x0(d16)) *
                                                        (x0(fi) - x0(d17));
                                              // Store the computed value
                                              el += dnfval;
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 355687428096000 * el;
          }
        }
      } break;
      case (18): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Derivative 10 acting on index
                              for (size_t d10 = 0; d10 < d9; d10++) {
                                if (d10 == fi)
                                  continue;
                                // Derivative 11 acting on index
                                for (size_t d11 = 0; d11 < d10; d11++) {
                                  if (d11 == fi)
                                    continue;
                                  // Derivative 12 acting on index
                                  for (size_t d12 = 0; d12 < d11; d12++) {
                                    if (d12 == fi)
                                      continue;
                                    // Derivative 13 acting on index
                                    for (size_t d13 = 0; d13 < d12; d13++) {
                                      if (d13 == fi)
                                        continue;
                                      // Derivative 14 acting on index
                                      for (size_t d14 = 0; d14 < d13; d14++) {
                                        if (d14 == fi)
                                          continue;
                                        // Derivative 15 acting on index
                                        for (size_t d15 = 0; d15 < d14; d15++) {
                                          if (d15 == fi)
                                            continue;
                                          // Derivative 16 acting on index
                                          for (size_t d16 = 0; d16 < d15;
                                               d16++) {
                                            if (d16 == fi)
                                              continue;
                                            // Derivative 17 acting on index
                                            for (size_t d17 = 0; d17 < d16;
                                                 d17++) {
                                              if (d17 == fi)
                                                continue;
                                              // Derivative 18 acting on index
                                              for (size_t d18 = 0; d18 < d17;
                                                   d18++) {
                                                if (d18 == fi)
                                                  continue;
                                                // Form the LIP product
                                                double dnfval = 1.0;
                                                for (size_t ip = 0;
                                                     ip < x0.n_elem; ip++) {
                                                  // Skip terms which have been
                                                  // acted upon by a derivative
                                                  if (ip == d1)
                                                    continue;
                                                  if (ip == d2)
                                                    continue;
                                                  if (ip == d3)
                                                    continue;
                                                  if (ip == d4)
                                                    continue;
                                                  if (ip == d5)
                                                    continue;
                                                  if (ip == d6)
                                                    continue;
                                                  if (ip == d7)
                                                    continue;
                                                  if (ip == d8)
                                                    continue;
                                                  if (ip == d9)
                                                    continue;
                                                  if (ip == d10)
                                                    continue;
                                                  if (ip == d11)
                                                    continue;
                                                  if (ip == d12)
                                                    continue;
                                                  if (ip == d13)
                                                    continue;
                                                  if (ip == d14)
                                                    continue;
                                                  if (ip == d15)
                                                    continue;
                                                  if (ip == d16)
                                                    continue;
                                                  if (ip == d17)
                                                    continue;
                                                  if (ip == d18)
                                                    continue;
                                                  if (ip == fi)
                                                    continue;
                                                  dnfval *= (x(ix) - x0(ip)) /
                                                            (x0(fi) - x0(ip));
                                                }
                                                // Apply derivative denominators
                                                dnfval /= (x0(fi) - x0(d1)) *
                                                          (x0(fi) - x0(d2)) *
                                                          (x0(fi) - x0(d3)) *
                                                          (x0(fi) - x0(d4)) *
                                                          (x0(fi) - x0(d5)) *
                                                          (x0(fi) - x0(d6)) *
                                                          (x0(fi) - x0(d7)) *
                                                          (x0(fi) - x0(d8)) *
                                                          (x0(fi) - x0(d9)) *
                                                          (x0(fi) - x0(d10)) *
                                                          (x0(fi) - x0(d11)) *
                                                          (x0(fi) - x0(d12)) *
                                                          (x0(fi) - x0(d13)) *
                                                          (x0(fi) - x0(d14)) *
                                                          (x0(fi) - x0(d15)) *
                                                          (x0(fi) - x0(d16)) *
                                                          (x0(fi) - x0(d17)) *
                                                          (x0(fi) - x0(d18));
                                                // Store the computed value
                                                el += dnfval;
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 6402373705728000 * el;
          }
        }
      } break;
      case (19): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Derivative 10 acting on index
                              for (size_t d10 = 0; d10 < d9; d10++) {
                                if (d10 == fi)
                                  continue;
                                // Derivative 11 acting on index
                                for (size_t d11 = 0; d11 < d10; d11++) {
                                  if (d11 == fi)
                                    continue;
                                  // Derivative 12 acting on index
                                  for (size_t d12 = 0; d12 < d11; d12++) {
                                    if (d12 == fi)
                                      continue;
                                    // Derivative 13 acting on index
                                    for (size_t d13 = 0; d13 < d12; d13++) {
                                      if (d13 == fi)
                                        continue;
                                      // Derivative 14 acting on index
                                      for (size_t d14 = 0; d14 < d13; d14++) {
                                        if (d14 == fi)
                                          continue;
                                        // Derivative 15 acting on index
                                        for (size_t d15 = 0; d15 < d14; d15++) {
                                          if (d15 == fi)
                                            continue;
                                          // Derivative 16 acting on index
                                          for (size_t d16 = 0; d16 < d15;
                                               d16++) {
                                            if (d16 == fi)
                                              continue;
                                            // Derivative 17 acting on index
                                            for (size_t d17 = 0; d17 < d16;
                                                 d17++) {
                                              if (d17 == fi)
                                                continue;
                                              // Derivative 18 acting on index
                                              for (size_t d18 = 0; d18 < d17;
                                                   d18++) {
                                                if (d18 == fi)
                                                  continue;
                                                // Derivative 19 acting on index
                                                for (size_t d19 = 0; d19 < d18;
                                                     d19++) {
                                                  if (d19 == fi)
                                                    continue;
                                                  // Form the LIP product
                                                  double dnfval = 1.0;
                                                  for (size_t ip = 0;
                                                       ip < x0.n_elem; ip++) {
                                                    // Skip terms which have
                                                    // been acted upon by a
                                                    // derivative
                                                    if (ip == d1)
                                                      continue;
                                                    if (ip == d2)
                                                      continue;
                                                    if (ip == d3)
                                                      continue;
                                                    if (ip == d4)
                                                      continue;
                                                    if (ip == d5)
                                                      continue;
                                                    if (ip == d6)
                                                      continue;
                                                    if (ip == d7)
                                                      continue;
                                                    if (ip == d8)
                                                      continue;
                                                    if (ip == d9)
                                                      continue;
                                                    if (ip == d10)
                                                      continue;
                                                    if (ip == d11)
                                                      continue;
                                                    if (ip == d12)
                                                      continue;
                                                    if (ip == d13)
                                                      continue;
                                                    if (ip == d14)
                                                      continue;
                                                    if (ip == d15)
                                                      continue;
                                                    if (ip == d16)
                                                      continue;
                                                    if (ip == d17)
                                                      continue;
                                                    if (ip == d18)
                                                      continue;
                                                    if (ip == d19)
                                                      continue;
                                                    if (ip == fi)
                                                      continue;
                                                    dnfval *= (x(ix) - x0(ip)) /
                                                              (x0(fi) - x0(ip));
                                                  }
                                                  // Apply derivative
                                                  // denominators
                                                  dnfval /= (x0(fi) - x0(d1)) *
                                                            (x0(fi) - x0(d2)) *
                                                            (x0(fi) - x0(d3)) *
                                                            (x0(fi) - x0(d4)) *
                                                            (x0(fi) - x0(d5)) *
                                                            (x0(fi) - x0(d6)) *
                                                            (x0(fi) - x0(d7)) *
                                                            (x0(fi) - x0(d8)) *
                                                            (x0(fi) - x0(d9)) *
                                                            (x0(fi) - x0(d10)) *
                                                            (x0(fi) - x0(d11)) *
                                                            (x0(fi) - x0(d12)) *
                                                            (x0(fi) - x0(d13)) *
                                                            (x0(fi) - x0(d14)) *
                                                            (x0(fi) - x0(d15)) *
                                                            (x0(fi) - x0(d16)) *
                                                            (x0(fi) - x0(d17)) *
                                                            (x0(fi) - x0(d18)) *
                                                            (x0(fi) - x0(d19));
                                                  // Store the computed value
                                                  el += dnfval;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 121645100408832000 * el;
          }
        }
      } break;
      case (20): {
        // Allocate memory
        dnf.zeros(x.n_elem, x0.n_elem);
        // Loop over points
        for (size_t ix = 0; ix < x.n_elem; ix++) {
          // Loop over polynomials
          for (size_t fi = 0; fi < x0.n_elem; fi++) {
            double el = 0.0;
            // Derivative 1 acting on index
            for (size_t d1 = 0; d1 < x0.n_elem; d1++) {
              if (d1 == fi)
                continue;
              // Derivative 2 acting on index
              for (size_t d2 = 0; d2 < d1; d2++) {
                if (d2 == fi)
                  continue;
                // Derivative 3 acting on index
                for (size_t d3 = 0; d3 < d2; d3++) {
                  if (d3 == fi)
                    continue;
                  // Derivative 4 acting on index
                  for (size_t d4 = 0; d4 < d3; d4++) {
                    if (d4 == fi)
                      continue;
                    // Derivative 5 acting on index
                    for (size_t d5 = 0; d5 < d4; d5++) {
                      if (d5 == fi)
                        continue;
                      // Derivative 6 acting on index
                      for (size_t d6 = 0; d6 < d5; d6++) {
                        if (d6 == fi)
                          continue;
                        // Derivative 7 acting on index
                        for (size_t d7 = 0; d7 < d6; d7++) {
                          if (d7 == fi)
                            continue;
                          // Derivative 8 acting on index
                          for (size_t d8 = 0; d8 < d7; d8++) {
                            if (d8 == fi)
                              continue;
                            // Derivative 9 acting on index
                            for (size_t d9 = 0; d9 < d8; d9++) {
                              if (d9 == fi)
                                continue;
                              // Derivative 10 acting on index
                              for (size_t d10 = 0; d10 < d9; d10++) {
                                if (d10 == fi)
                                  continue;
                                // Derivative 11 acting on index
                                for (size_t d11 = 0; d11 < d10; d11++) {
                                  if (d11 == fi)
                                    continue;
                                  // Derivative 12 acting on index
                                  for (size_t d12 = 0; d12 < d11; d12++) {
                                    if (d12 == fi)
                                      continue;
                                    // Derivative 13 acting on index
                                    for (size_t d13 = 0; d13 < d12; d13++) {
                                      if (d13 == fi)
                                        continue;
                                      // Derivative 14 acting on index
                                      for (size_t d14 = 0; d14 < d13; d14++) {
                                        if (d14 == fi)
                                          continue;
                                        // Derivative 15 acting on index
                                        for (size_t d15 = 0; d15 < d14; d15++) {
                                          if (d15 == fi)
                                            continue;
                                          // Derivative 16 acting on index
                                          for (size_t d16 = 0; d16 < d15;
                                               d16++) {
                                            if (d16 == fi)
                                              continue;
                                            // Derivative 17 acting on index
                                            for (size_t d17 = 0; d17 < d16;
                                                 d17++) {
                                              if (d17 == fi)
                                                continue;
                                              // Derivative 18 acting on index
                                              for (size_t d18 = 0; d18 < d17;
                                                   d18++) {
                                                if (d18 == fi)
                                                  continue;
                                                // Derivative 19 acting on index
                                                for (size_t d19 = 0; d19 < d18;
                                                     d19++) {
                                                  if (d19 == fi)
                                                    continue;
                                                  // Derivative 20 acting on
                                                  // index
                                                  for (size_t d20 = 0;
                                                       d20 < d19; d20++) {
                                                    if (d20 == fi)
                                                      continue;
                                                    // Form the LIP product
                                                    double dnfval = 1.0;
                                                    for (size_t ip = 0;
                                                         ip < x0.n_elem; ip++) {
                                                      // Skip terms which have
                                                      // been acted upon by a
                                                      // derivative
                                                      if (ip == d1)
                                                        continue;
                                                      if (ip == d2)
                                                        continue;
                                                      if (ip == d3)
                                                        continue;
                                                      if (ip == d4)
                                                        continue;
                                                      if (ip == d5)
                                                        continue;
                                                      if (ip == d6)
                                                        continue;
                                                      if (ip == d7)
                                                        continue;
                                                      if (ip == d8)
                                                        continue;
                                                      if (ip == d9)
                                                        continue;
                                                      if (ip == d10)
                                                        continue;
                                                      if (ip == d11)
                                                        continue;
                                                      if (ip == d12)
                                                        continue;
                                                      if (ip == d13)
                                                        continue;
                                                      if (ip == d14)
                                                        continue;
                                                      if (ip == d15)
                                                        continue;
                                                      if (ip == d16)
                                                        continue;
                                                      if (ip == d17)
                                                        continue;
                                                      if (ip == d18)
                                                        continue;
                                                      if (ip == d19)
                                                        continue;
                                                      if (ip == d20)
                                                        continue;
                                                      if (ip == fi)
                                                        continue;
                                                      dnfval *=
                                                          (x(ix) - x0(ip)) /
                                                          (x0(fi) - x0(ip));
                                                    }
                                                    // Apply derivative
                                                    // denominators
                                                    dnfval /=
                                                        (x0(fi) - x0(d1)) *
                                                        (x0(fi) - x0(d2)) *
                                                        (x0(fi) - x0(d3)) *
                                                        (x0(fi) - x0(d4)) *
                                                        (x0(fi) - x0(d5)) *
                                                        (x0(fi) - x0(d6)) *
                                                        (x0(fi) - x0(d7)) *
                                                        (x0(fi) - x0(d8)) *
                                                        (x0(fi) - x0(d9)) *
                                                        (x0(fi) - x0(d10)) *
                                                        (x0(fi) - x0(d11)) *
                                                        (x0(fi) - x0(d12)) *
                                                        (x0(fi) - x0(d13)) *
                                                        (x0(fi) - x0(d14)) *
                                                        (x0(fi) - x0(d15)) *
                                                        (x0(fi) - x0(d16)) *
                                                        (x0(fi) - x0(d17)) *
                                                        (x0(fi) - x0(d18)) *
                                                        (x0(fi) - x0(d19)) *
                                                        (x0(fi) - x0(d20));
                                                    // Store the computed value
                                                    el += dnfval;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            dnf(ix, fi) = 2432902008176640000 * el;
          }
        }
      } break;
      default:
        std::ostringstream oss;
        oss << n << "th derivatives not implemented!\n";
        throw std::logic_error(oss.str());
      }
    }
  } // namespace polynomial_basis
} // namespace helfem
